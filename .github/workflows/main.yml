name: BIT Notice Update (WebVPN + RSS)
on:
  schedule:
    - cron: '*/10 * * * *'  # 每 10 分钟运行（可改 5 分钟：*/5 * * * *）
  workflow_dispatch:  # 手动触发

jobs:
  run-update:
    runs-on: ubuntu-latest
    steps:
      # 1. 拉取仓库代码（含配置文件）
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 拉取全量历史

      # 2. 安装 Deno（原项目依赖）
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: latest  # 或固定版本（如 1.41.0）

      # 3. 配置 WebVPN 账号（从 Secrets 读，写入 proxy.secrets.json）
      - name: Configure WebVPN
        run: |
          mkdir -p config
          echo '${{ secrets.PROXY_SECRETS }}' > config/proxy.secrets.json
          # 校验格式（可选，防止配置错误）
          # deno run --allow-read scripts/validate-proxy-config.ts  # 若项目有校验脚本

      # 修复依赖完整性 + 处理 npm 依赖
      - name: Fix dependencies & Integrity
        run: |
          # 删除旧锁文件
          rm -f deno.lock
          # 或直接运行：
          deno cache --reload --import-map=deno.jsonc --node-modules-dir=true src/**/*.ts
          # ↑ --node-modules-dir=true 强制启用 npm 兼容模式

      # 4. 执行核心任务（WebVPN + RSS 生成）
      - name: Run Update Server
        env:
          PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }} 
          PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
        run: deno task update-server
        # 权限已在 deno.jsonc 的 tasks 中声明，无需重复加

      # 5. 部署 RSS 到 GitHub Pages（让 RSS 可公开订阅）
      - name: Deploy RSS to Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          publish_dir: ./output
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # 6. 上传输出文件（调试用）
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: outputs
          path: output/
