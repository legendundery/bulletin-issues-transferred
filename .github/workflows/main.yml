name: BIT Notice Update (WebVPN + RSS)
on:
  schedule:
    - cron: '*/10 * * * *'  # 每 10 分钟运行（可按需调整）
  workflow_dispatch:  # 手动触发

jobs:
  run-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 拉取全量历史

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: latest  

      - name: Configure WebVPN
        run: |
          mkdir -p config
          echo '${{ secrets.PROXY_SECRETS }}' > config/proxy.secrets.json

      - name: Fix dependencies & Integrity
        run: |
          rm -f deno.lock
          deno cache --reload --import-map=deno.jsonc --node-modules-dir=true src/**/*.ts

      - name: Run Update Server
        env:
          PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }} 
          PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
        run: deno task update-server

      - name: Deploy RSS to Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          publish_dir: ./output
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: outputs
          path: output/

  send-rss-email:
    needs: run-update  # 等 run-update 完成再执行
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  #  checkout 主分支（按实际分支名调整）

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install rss-parser nodemailer

      # 初始化 last-sent-id 文件（若不存在则创建空文件）
      - name: Init last-sent-id
        run: |
          if [ ! -f "last-sent-id.txt" ]; then
            touch last-sent-id.txt
          fi

      - name: Fetch RSS and send email
        env:
          SMTP_SERVER: ${{ secrets.EMAIL_SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.EMAIL_SMTP_PORT }}
          SMTP_USER: ${{ secrets.EMAIL_USER }}
          SMTP_PASS: ${{ secrets.EMAIL_PASSWORD }}
          TO_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
          RSS_URL: "https://legendundery.github.io/bulletin-issues-transferred/feed.rss" 
        # 改用把 Node 脚本写到单独文件的方式，避免 Shell 解析冲突
        run: |
          cat << 'EOF' > send-rss-email.cjs
          const Parser = require('rss-parser');
          const nodemailer = require('nodemailer');
          const fs = require('fs');
          const path = require('path');
          
          const lastSentFile = path.join(__dirname, 'last-sent-id.txt');
          let lastSentId = '';
          if (fs.existsSync(lastSentFile)) {
            lastSentId = fs.readFileSync(lastSentFile, 'utf8').trim();
          }
          
          (async () => {
            try {
              const parser = new Parser();
              const feed = await parser.parseURL(process.env.RSS_URL);
              const newItems = feed.items
                .filter(item => item.guid !== lastSentId)
                .sort((a, b) => new Date(b.isoDate) - new Date(a.isoDate));
          
              if (newItems.length === 0) {
                console.log('No new RSS items.');
                return;
              }
          
              const emailContent = `
                <h2>最新更新 (${newItems.length}条)</h2>
                <ul>
                  ${newItems.map(item => `
                    <li>
                      <h3><a href="${item.link}">${item.title}</a></h3>
                      <p>${item.contentSnippet || '无摘要'}</p>
                      <small>发布时间：${new Date(item.isoDate).toLocaleString()}</small>
                    </li>
                  `).join('')}
                </ul>
              `;
          
              const transporter = nodemailer.createTransport({
                host: process.env.SMTP_SERVER,
                port: process.env.SMTP_PORT,
                secure: true,
                auth: {
                  user: process.env.SMTP_USER,
                  pass: process.env.SMTP_PASS
                }
              });
          
              await transporter.sendMail({
                from: `"RSS 通知" <${process.env.SMTP_USER}>`,
                to: process.env.TO_EMAIL,
                subject: `【新内容】${feed.title} 更新`,
                html: emailContent
              });
          
              fs.writeFileSync(lastSentFile, newItems[0].guid);
              console.log('Email sent successfully.');
            } catch (error) {
              console.error('Error:', error);
              process.exit(1);
            }
          })();
          EOF
          
          node send-rss-email.cjs

      - name: Save last sent ID to repository
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add last-sent-id.txt
          git commit -m "Update last sent RSS item ID" || true  # 无变更时不报错
          git push origin main
